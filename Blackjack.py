from Game import Game
import random

class Blackjack(Game):
    def __init__(self, requirement, award, rules, message_requirement):
        super().__init__(requirement, 'Blackjack', award, rules, message_requirement = message_requirement)
        self.cards = {'A': {'ammount': 4, 'value': 1 or 11}, '2': {'ammount': 4, 'value': 2}, '3': {'ammount': 4, 'value': 3}, '4': {'ammount': 4, 'value': 4}, '5': {'ammount': 4, 'value': 5}, '6': {'ammount': 4, 'value': 6}, '7': {'ammount': 4, 'value': 7}, '8': {'ammount': 4, 'value': 8}, '9': {'ammount': 4, 'value': 9}, '10': {'ammount': 4, 'value': 10}, 'J': {'ammount': 4, 'value': 10}, 'Q': {'ammount': 4, 'value': 10}, 'K': {'ammount': 4, 'value': 10}} #diccionario con la informaci√≥n de cu√°ntas cartas quedan por tipo y cu√°l es su valor si son tomadas

    def intro_game(self, player):
            can_play = True
            
            if self.won:
                print("\nYa ganaste este juego.\n")
            else:
                for item in self.requirement:
                    if item.lower() not in player.get_inventory():
                        can_play = False
                        print(f"\n{self.message_requirement.capitalize()}\n")
                        break
                if can_play and input(f"¬øDeseas usar los objetos {self.requirement[0]} y {self.requirement[1]} para jugar este juego? [S] = s√≠, cualquier otro caracter = no: ").lower() == 's':
                    print("\n", f"¬°BIENVENIDO AL JUEGO: {self.name.upper()}!".center(120, " "))
                    print(f"REGLAS: {self.rules}\n")
                    self.game_begins(player)
                   
    def game_begins(self, player):

        print("\nüëÄComienza una nueva partida.üëÄ")
        self.new_deck_of_cards() #este m√©todo permite usar un mazo nuevo, en el que est√°n todas las 52 cartas sin usar (las cantidades de cada tipo de carta son 4)

        player_cards_value = crupier_cards_value = 0 

        input("\nPresiona 'enter' cuando est√©s listo para seguir.\n‚ñ∂Ô∏è ")
        #inicialmente en un juego de blackjack, el jugador obtiene 2 cartas y el crupier 1.
        player_cards_value = self.pick_a_card(player.get_avatar(), player_cards_value)
        crupier_cards_value = self.pick_a_card('Crupier', crupier_cards_value)
        player_cards_value = self.pick_a_card(player.get_avatar(), player_cards_value)
            
        win = False

        while player_cards_value < 21 and input("¬øDeseas tomar otra carta? [S] = s√≠, cualquier otro caracter = no: ").lower() == 's': #si la suma del valor de las cartas que ha tomado el jugador es menor que 21, puede tomar otra carta (si as√≠ lo decide el jugador al responder afirmativamente al input, es decir, 's')
            player_cards_value = self.pick_a_card(player.get_avatar(), player_cards_value)
        
        if player_cards_value <= 21: #si se pasa de 21, autom√°ticamente pierde (ya que win = False y al llamarse el m√©todo win_or_lose se obtendr√° que se perdi√≥ la partida) 
            
            while crupier_cards_value <= 16: #seg√∫n las reglas del Blackjack el crupier toma cartas mientras est√© por debajo al 17 y a partir del 17 no toma m√°s cartas.
                crupier_cards_value = self.pick_a_card('Crupier', crupier_cards_value)

            if crupier_cards_value > 21 or player_cards_value > crupier_cards_value: #si el crupier se pas√≥, como ya se estableci√≥ que el jugador no se pas√≥ de 21, el jugador gana (win = True). Si ninguno de los dos se pas√≥ de 21 y el jugador tiene un puntaje mayor que el crupier, autom√°ticamente est√° m√°s cerca de 21 as√≠ que gana (de lo contrario, pierde: como ya win = False, al llamarse al m√©todo win_or_lose se obtiene que el jugador perdi√≥ la partida.).
                win = True
            elif player_cards_value == crupier_cards_value: #si ninguno de los dos se pas√≥ y obtuvieron el mismo valor, hay un empate: no se pierde vidas pero se vuelve a jugar (win = None).
                win = None


        self.win_or_lose(player, win)

    def new_deck_of_cards(self):
        """M√©todo para empezar cada partida con un mazo de cartas completo (con la cantidad total de cartas de un mazo normal).
        """
        self.cards = {'A': {'ammount': 4, 'value': 1 or 11}, '2': {'ammount': 4, 'value': 2}, '3': {'ammount': 4, 'value': 3}, '4': {'ammount': 4, 'value': 4}, '5': {'ammount': 4, 'value': 5}, '6': {'ammount': 4, 'value': 6}, '7': {'ammount': 4, 'value': 7}, '8': {'ammount': 4, 'value': 8}, '9': {'ammount': 4, 'value': 9}, '10': {'ammount': 4, 'value': 10}, 'J': {'ammount': 4, 'value': 10}, 'Q': {'ammount': 4, 'value': 10}, 'K': {'ammount': 4, 'value': 10}}

    def pick_a_card(self, player, cards_value):
        """M√©todo para que el jugador del turno actual escoja una carta y se le sume el valor determinado de la misma al valor que el jugador llevaba ya.

        Args:
            player (str): nombre del jugador del turno actual.
            cards_value (int): valor acumulado de las cartas que ha tomado el jugador.

        Returns:
            int: valor acumulado de las cartas del jugador, despu√©s de tomar una carta.
        """
        card = random.choice(list(self.cards.keys())) #se toma una carta aleatoria (a partir de una lista de las llaves del diccionario cards)
        if self.cards[card]['ammount'] > 0: #si a√∫n quedan cartas del tipo de carta que se escogi√≥, entonces se resta 1 a la cantidad de cartas de este tipo en el mazo
            self.cards[card]['ammount'] -= 1
            print(f"\n\nTurno de {player}. Tom√≥ un {card}.")
            if card == 'A': #si la carta es A, puede tener un valor de 11 o de 1: si al sumarle 11 no se pasa de 21, entonces √©ste es su valor: de lo contrario es 1.
                if cards_value + 11 <= 21:
                    cards_value += 11
                else:
                    cards_value += 1
            else: #si la carta no es A, el valor de la misma es el valor guardado en el diccionario del mazo de cartas
                cards_value += self.cards[card]['value']
            print(f"Su puntaje es ahora: {cards_value}.")
            input("\n‚ñ∂Ô∏è ") #este input es para que el jugador tenga tiempo de leer qu√© ocurre en cada turno y luego seguir al presionar enter.
            return cards_value
        else:
            self.pick_a_card(player, cards_value) #si ya no hay cartas en el mazo del tipo escogido aleatoriamente, se vuelve a escoger una carta distinta.
    
    def win_or_lose(self, player, win):
        """M√©todo para determinar si el usuario gan√≥, empat√≥ o perdi√≥ una partida. Si gana, llama al m√©todo de Player que saca los √≠tems usados para jugarlo de su inventario.

        Args:
            player (Player): instancia de la clase Player asociado al jugador que juega.
            win (bool or NoneType): variable que es True si el usuario gan√≥ el juego, None si se empat√≥ y False si se perdi√≥.
        """
        if win == True:
            print("\nüôå¬°GANASTE!üôå")
            self.won = True
            print('''
         ______________________________________________________________________
        |                       ________________________ _________________     |
        |                      |                        |                 |    |
        |                      |                        |                 |    |
        |                      |                        |                 |    |
        |                      |                        |                 |    |
        |                      |                        |                 |    |
        |                      |                        |                 |    |
        |               ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÑ‚ñë‚ñí‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ       |    |
        |               ‚ñí‚ñà‚ñë‚ñÑ‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñí‚ñà‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚ñë‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ   ==O |    |
        |               ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñë‚ñë‚ñÄ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñë‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ       |    |
        |                      |                        |                 |    |
        |                      |________________________|                 |    |
        |                      |                        |                 |    |
        |                      |                        |                 |    |
        |                      |                        |                 |    |
        |______________________|________________________|_________________|____|
        ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
        ''')

            for item in self.requirement:
                player.use_item_from_inventory(item.lower())


        elif win == False: 
            player.lose_lives(1)
            print("\n‚ùåPERDISTE‚ùå")
            if player.get_lives() > 0: #si el jugador a√∫n tiene vidas, entonces sigue con otra partida.
                self.game_begins(player)

        elif win == None:
            print("\n‚öñÔ∏èHubo un empate.‚öñÔ∏è")
            self.game_begins(player) #si el jugador empata, no pierde una vida como cuando pierde la partida, pero vuelve a jugar.
        